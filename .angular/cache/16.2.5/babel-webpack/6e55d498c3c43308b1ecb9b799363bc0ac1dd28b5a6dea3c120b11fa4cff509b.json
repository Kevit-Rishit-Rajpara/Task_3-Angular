{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(router) {\n    this.router = router;\n    this.emailId = 'rishit@gmail.com';\n    this.password = '123';\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'password': new FormControl(null, Validators.required)\n    });\n  }\n  onLogin() {\n    if (this.loginForm.valid && this.loginForm.value.email === this.emailId && this.loginForm.value.password === this.password) {\n      console.log(this.loginForm.value.email);\n      console.log(this.loginForm.value.password);\n      this.router.navigate(['/userForm']);\n    } else {\n      alert(\"Please Enter valid Inputs\");\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginComponent","constructor","router","emailId","password","ngOnInit","loginForm","required","email","onLogin","valid","value","console","log","navigate","alert","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/kevit/Documents/Angular/Task_2/src/app/login/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent  implements OnInit{\n\n  constructor(private router : Router){}\n    loginForm!: FormGroup;\n    emailId = 'rishit@gmail.com';\n    password = '123'\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      'email': new FormControl(null, [Validators.required,Validators.email]),\n      'password': new FormControl(null , Validators.required),\n    })\n  }\n\n  onLogin() {\n    \n    if (this.loginForm.valid && this.loginForm.value.email === this.emailId && this.loginForm.value.password === this.password  ) {\n      console.log(this.loginForm.value.email);\n      console.log(this.loginForm.value.password);\n      this.router.navigate(['/userForm'])\n    }\n    else {\n      alert(\"Please Enter valid Inputs\")\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAEzBC,YAAoBC,MAAe;IAAf,KAAAA,MAAM,GAANA,MAAM;IAExB,KAAAC,OAAO,GAAG,kBAAkB;IAC5B,KAAAC,QAAQ,GAAG,KAAK;EAHmB;EAIrCC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAIR,SAAS,CAAC;MAC7B,OAAO,EAAE,IAAID,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAACR,UAAU,CAACS,KAAK,CAAC,CAAC;MACtE,UAAU,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAGE,UAAU,CAACQ,QAAQ;KACvD,CAAC;EACJ;EAEAE,OAAOA,CAAA;IAEL,IAAI,IAAI,CAACH,SAAS,CAACI,KAAK,IAAI,IAAI,CAACJ,SAAS,CAACK,KAAK,CAACH,KAAK,KAAK,IAAI,CAACL,OAAO,IAAI,IAAI,CAACG,SAAS,CAACK,KAAK,CAACP,QAAQ,KAAK,IAAI,CAACA,QAAQ,EAAI;MAC5HQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,CAACK,KAAK,CAACH,KAAK,CAAC;MACvCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,CAACK,KAAK,CAACP,QAAQ,CAAC;MAC1C,IAAI,CAACF,MAAM,CAACY,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;KACpC,MACI;MACHC,KAAK,CAAC,2BAA2B,CAAC;;EAEtC;CACD;AAxBYf,cAAc,GAAAgB,UAAA,EAL1BpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWnB,cAAc,CAwB1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}