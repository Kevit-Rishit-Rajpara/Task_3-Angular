{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(router, authService) {\n      this.router = router;\n      this.authService = authService;\n    }\n    ngOnInit() {\n      this.loginForm = new FormGroup({\n        email: new FormControl(null, [Validators.required, Validators.email]),\n        password: new FormControl(null, Validators.required)\n      });\n    }\n    onLogin() {\n      if (this.authService.login(this.loginForm.value)) {\n        this.router.navigate(['/userList']);\n        // ***************Alert Box****************\n        const Toast = Swal.mixin({\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 1500,\n          timerProgressBar: true,\n          didOpen: toast => {\n            toast.addEventListener('mouseenter', Swal.stopTimer);\n            toast.addEventListener('mouseleave', Swal.resumeTimer);\n          }\n        });\n        Toast.fire({\n          icon: 'success',\n          title: 'Signed in successfully'\n        });\n      } else {\n        localStorage.setItem('isAuthenticated', 'false');\n        const Toast = Swal.mixin({\n          toast: true,\n          position: 'top',\n          showConfirmButton: false,\n          timer: 1000,\n          timerProgressBar: true,\n          didOpen: toast => {\n            toast.addEventListener('mouseenter', Swal.stopTimer);\n            toast.addEventListener('mouseleave', Swal.resumeTimer);\n          }\n        });\n        Toast.fire({\n          icon: 'warning',\n          iconColor: 'red',\n          title: 'Invalid Credentials'\n        });\n        console.log('Not valid');\n      }\n    }\n    static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 22,\n      vars: 3,\n      consts: [[1, \"container\"], [1, \"row\"], [3, \"formGroup\", \"ngSubmit\"], [\"id\", \"email-group\"], [\"type\", \"text\", \"id\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\"], [3, \"ngClass\"], [\"id\", \"passsword-group\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\"], [1, \"error\", 3, \"ngClass\"], [\"type\", \"submit\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\")(3, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onLogin();\n          });\n          i0.ɵɵelementStart(4, \"h2\");\n          i0.ɵɵtext(5, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 3);\n          i0.ɵɵelement(7, \"input\", 4)(8, \"br\");\n          i0.ɵɵelementStart(9, \"p\", 5);\n          i0.ɵɵtext(10, \"Invalid Email!\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 6);\n          i0.ɵɵelement(12, \"input\", 7)(13, \"br\");\n          i0.ɵɵelementStart(14, \"p\", 8);\n          i0.ɵɵtext(15, \"Password is Required!\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"button\", 9);\n          i0.ɵɵtext(17, \"Login\");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelement(18, \"br\")(19, \"br\")(20, \"br\")(21, \"br\");\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngClass\", !ctx.loginForm.get(\"email\").valid && ctx.loginForm.get(\"email\").touched ? \"error_display\" : \"error_hiden\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngClass\", !ctx.loginForm.get(\"password\").valid && ctx.loginForm.get(\"password\").touched ? \"error_display\" : \"error_hiden\");\n        }\n      },\n      dependencies: [i3.NgClass, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n      styles: [\".container[_ngcontent-%COMP%]{max-width:20vw;padding:1rem;margin-inline:auto;margin-top:25vh;background-color:#222924;box-shadow:#00000040 0 54px 55px,#0000001f 0 -12px 30px,#0000001f 0 4px 6px,#0000002b 0 12px 13px,#00000017 0 -3px 5px;height:17rem;border-radius:.5rem;color:#f5eb6d}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:xx-large;padding-bottom:2.5rem}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border-radius:.5rem;outline:none;border:none;padding:.5rem;color:#18453b;background-color:#faebd7;width:15vw;font-size:large}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:auto;width:8vw;height:2.5rem;border-radius:1.5rem;outline:none;border:none;color:#4e2d2d;font-size:x-large;font-weight:700;margin-top:2rem;background-color:#faebd7}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#bd5f5f;color:#fff}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   #email-group[_ngcontent-%COMP%], .container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   #password-group[_ngcontent-%COMP%]{margin-bottom:1rem;padding-inline:auto;height:5vh}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .error_display[_ngcontent-%COMP%]{font-size:smaller;font-family:Verdana,Geneva,Tahoma,sans-serif;visibility:visible;margin-top:.3rem;color:#deb887}.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .error_hiden[_ngcontent-%COMP%]{visibility:hidden}@media (max-width: 900px){.container[_ngcontent-%COMP%]{max-width:35vw;padding:2vw;justify-content:center}.container[_ngcontent-%COMP%]   #email-group[_ngcontent-%COMP%], .container[_ngcontent-%COMP%]   #password-group[_ngcontent-%COMP%]{padding-inline:0}.container[_ngcontent-%COMP%]   .error_display[_ngcontent-%COMP%]{font-size:1rem}.container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:90%!important}.container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:0;width:50%!important}}@media (max-width: 500px){.container[_ngcontent-%COMP%]{max-width:100vw;max-height:100vh!important;margin-inline:0;padding:1vw}.container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:90%!important}.container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:auto;width:30%!important}}\"]\n    });\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}